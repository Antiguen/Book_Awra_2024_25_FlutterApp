import { Model } from "mongoose";
import { JwtService } from "@nestjs/jwt";
import { MailerService } from "@nestjs-modules/mailer";
import { CreateUserDto } from "src/dto/create-user.dto";
import { VerifyEmailDto } from "src/dto/verify-email.dto";
import { User } from "src/schemas/user.schema";
import { UserRole } from "src/schemas/user-role.enum";
import { CreateProfileDto } from "src/dto/create-profile.dto";
import { UpdateProfileDto } from "src/dto/update-profile.dto";
import { Profile } from "src/schemas/profile.schema";
import { ProfileService } from '../profile/profile.service';
export declare class AuthService {
    private userModel;
    private profileModel;
    private readonly jwtService;
    private readonly mailerService;
    private profileService;
    constructor(userModel: Model<User>, profileModel: Model<Profile>, jwtService: JwtService, mailerService: MailerService, profileService: ProfileService);
    onModuleInit(): Promise<void>;
    register(createUserDto: CreateUserDto): Promise<User>;
    sendVerificationCode(email: string): Promise<string>;
    verifyEmailCode(verifyEmailDto: VerifyEmailDto): Promise<boolean>;
    generateJwtToken(user: User): Promise<string>;
    generateVerificationCode(): string;
    verifyUser(email: string, password: string): Promise<boolean>;
    sendPasswordResetEmail(email: string, verificationCode: string): Promise<void>;
    validateToken(token: string): Promise<any>;
    findByEmail(email: string): Promise<User | undefined>;
    changeUserRole(userId: string, newRole: UserRole): Promise<User>;
    deleteUser(userId: string): Promise<void>;
    getAllUsers(): Promise<User[]>;
    createProfile(token: string, createProfileDto: CreateProfileDto): Promise<Profile>;
    updateProfile(token: string, updateProfileDto: UpdateProfileDto): Promise<Profile>;
    getProfile(token: string): Promise<Profile | undefined>;
    resetPassword(email: string): Promise<void>;
    getUserId(token: string): Promise<string>;
    createSuperAdmin(): Promise<void>;
    registerArtist(createUserDto: CreateUserDto): Promise<User>;
}
